/*
	1. Manual Approval Before Deploy to the container.
	2. Post Build Block in the pipeline. Failed,Success,Unstable,Abort etc..
    3. Cleanup In the Post action block in jenkins pipeline.
 */

//  properties([
//   parameters([
//         choice(choices: 'sprint_6\nsprint_7\nsprint_8\nSprint_9', description: 'Select branch to Build', name: 'Branch'),
//         choice(choices: 'No\nYes', , name: 'choice2'),
//         choice(choices: 'No\nYes', name: 'choice3')
//   ])
// ])

pipeline {
    agent any
    environment {
    dockerImageName = "simpleapachehttp"
    dockerbuildversion = "$dockerImageName:v$BUILD_NUMBER"
    dockertag = "${env.BUILD_NUMBER}"
    containername = "apachehttpd"
    }
    options {
        parameters([
                choice(choices: 'sprint_6\nsprint_7\nsprint_8\nSprint_9', description: 'Select branch to Build', name: 'Branch'),
                choice(choices: 'No\nYes', , name: 'choice2'),
                choice(choices: 'No\nYes', name: 'choice3')
        ])
        disableConcurrentBuilds()
    }
    stages {
        stage('DockerBuild') {
            steps {
                script {
                    echo " ========= Starting docker ========="
                    sh 'docker build -t $dockerImageName/$BUILD_NUMBER:latest -f Dockerfile_alphine .'
                    sh 'docker inspect apachehttpd >/dev/null 2>&1 || { echo "Failed to inspect Docker image"; exit 1; }'
                    // Verify that the image has the expected properties
                    def imageInfo = sh(script: 'docker inspect apachehttpd', returnStdout: true).trim()
                    if (!imageInfo.contains('apachehttpd') || !imageInfo.contains('latest')) {
                        error('Docker image has unexpected properties')
                    }
                    // docker commit mycontainer myrepo/apachehttpd:v1.0
                }
            }
        }
        stage('deploy') {
            steps {
                script {
                    timeout(time: 600, unit: 'SECONDS') {
                    def userInput = input(
                        message: 'Do you approve the deployment?',
                        parameters: [
                            booleanParam(defaultValue: true, description: 'Approve?', name: 'APPROVE')
                        ]
                    )
                    if (!userInput.APPROVE) {
                        error('Deployment not approved!')
                    } else if (userInput.APPROVE) {
                        sh 'docker run -d --name $containername$BUILD_NUMBER -p 100:80 $dockerImageName/$BUILD_NUMBER'
                    } else {
                        echo "Timeout"
                    }
                    }
                    // def approval = input message: 'Deploy to container?', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Approve deployment to container?']]
                    // if (!approval) {
                    //     error('Deployment to production was not approved')
                    // } else if (approval) {
                    //     sh 'docker run -d --name $containername$BUILD_NUMBER -p 100:80 $dockerImageName/$BUILD_NUMBER'
                    // } else {
                    //     echo "timeout"
                    // }
                }

            }
        }
    }
    post {
        always {
            echo '******************************** Pipeline Run Completed ****************************'
        }
        success {
            echo 'success'
        }
        failure {
            echo 'docker deploy failed failed'
            sh 'docker system prune'
            sh 'docker container prune'
            sh 'docker image prune'
            sh 'docker network prune'
            sh 'docker volume prune'
        }
        unstable {
            echo 'current Pipeline has "unstable" state, usually by a failed test, code violations and other causes, in order to run. Usually represented in a web UI with a yellow indication.'
        }
        changed {
            echo 'can only be run if the current Pipeline is running at a different state than the previously completed Pipeline'
        }
    }
}